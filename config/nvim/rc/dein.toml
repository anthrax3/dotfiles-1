[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim', 'vim-textobj-user']

[[plugins]] # vim-precious で <Plug>(textobj-precious-i) を使用したい時に必要。
repo = 'kana/vim-textobj-user'

[[plugins]] # コード補完
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
on_i = 1
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#sources#go#package_dot = 1
  set completeopt-=preview " プレビューウィンドウを開かないようにする
  "set completeopt+=noinsert " 最初の候補がデフォで選択されるようにする
  " TAB や Shift-TAB で補完補完候補を上下する
  if ! dein#tap('neosnippet.vim')
    " neosnippet使う場合はそっちも考慮した設定をしてるのでスキップ
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  endif
  inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
  inoremap <expr><UP>   pumvisible() ? "\<C-p>" : "<UP>"
  inoremap <expr><DOWN> pumvisible() ? "\<C-n>" : "<DOWN>"
  " python3が無かったらメッセージを表示
  if has('nvim') && !has('python3')
    echo "require python3 https://gist.github.com/kawaz/393c7f62fe6e857cc3d9 or execute 'pip3 install neovim --upgrade' and :call dein#update()"
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_ft = ['neosnippet']
on_i = 1
hook_add_ = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_complete_done = 1
  let g:neosnippet#expand_word_boundary = 1
  " スニペットディレクトリを設定（同じスニペットが見つかった場合は最初の先に見つかったほうが優先される)
  let g:neosnippet#snippets_directory = []
  if exists('$DOTFILES_DIR')
  let g:neosnippet#snippets_directory += [$DOTFILES_DIR . '/etc/vim/neosnippets']
  endif
  if ! empty(dein#get('neosnippet-snippets'))
  let g:neosnippet#snippets_directory += [dein#get('neosnippet-snippets').path . '/neosnippets']
  endif
  " Plugin key-mappings. スニペット補完候補がある場合は C-k でスニペットを展開する（Enterではない）
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  " SuperTab like snippets behavior. スニペットのプレースホルダ上にいる時はTabで次のプレースホルダにジャンプする
  imap <expr><TAB> neosnippet#jumpable() ? '\<Plug>(neosnippet_expand_or_jump)' : pumvisible() ? '\<C-n>' : '\<TAB>'
  smap <expr><TAB> neosnippet#jumpable() ? '\<Plug>(neosnippet_expand_or_jump)' : '\<TAB>'
  " For snippet_complete marker.
  if has('conceal')
  set conceallevel=2 concealcursor=i
  endif
'''


[[plugins]] # カラースキーマ
repo = 'w0ng/vim-hybrid'
hook_add = '''
  let g:hybrid_custom_term_colors = 1
  let g:hybrid_reduced_contrast = 1
  set background=dark
  " colorscheme 設定は dein#end() 後のタイミングで発火予定のユーザイベントで行う
  au MyAutoCmd User MyEvent_DeinAllSet colorscheme hybrid
'''

[[plugins]] # ステータスラインを手軽にかっこ良くする(要フォントパッチ)
repo = 'itchyny/lightline.vim'
depends = ['vim-hybrid']
hook_add = '''
  " lightlineがあればshowmodeは不用なので消す
  set noshowmode
  " フォントパッチが何種類かあるのでコードでメモ
  let s:powerfonts = {
        \ 'powerline':     { 'left':"\ue0b0", 'leftsub':"\ue0b1", 'right':"\ue0b2", 'rightsub':"\ue0b3", 'branch':"\ue0a0", 'linecolumn':"\ue0a1", 'readonly':"\ue0a2" },
        \ 'vim-powerline': { 'left':"\u2b80", 'leftsub':"\u2b81", 'right':"\u2b82", 'rightsub':"\u2b83", 'branch':"\u2b60", 'linecolumn':"\u2b81", 'readonly':"\u2b64" }
        \ }
  " Patched fonts for Powerline https://github.com/powerline/fonts
  let s:powerfont = s:powerfonts['powerline']
  " TODO: syntastic, ctrlpmark, unite, vimshell, vimfiler, ...対応
  " TODO: winwidth(0) を見てレスポンシブ対応
  " TODO: gitのahead/behind数表示
  let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'fugitive', 'gitgutter', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'gitgutter': 'LightLineGitgutter',
        \   'readonly': 'LightLineReadonly',
        \   'modified': 'LightLineModified'
        \ },
        \ 'separator': { 'left': s:powerfont.left, 'right': s:powerfont.right },
        \ 'subseparator': { 'left': s:powerfont.leftsub, 'right': s:powerfont.rightsub }
        \ }
  " gitブランチ表示
  function! LightLineFugitive()
    try
      if &ft !~? 'help\|vimfiler\|gundo' && exists("*fugitive#head")
        let _ = fugitive#head()
        return strlen(_) ? s:powerfont.branch .' '. _ : ''
      endif
    catch
    endtry
    return ''
  endfunction
  " gitハンク表示
  function! LightLineGitgutter()
    if ! exists('*GitGutterGetHunkSummary')
          \ || ! get(g:, 'gitgutter_enabled', 0)
          \ || winwidth('.') <= 90
      return ''
    endif
    let symbols = [
          \ g:gitgutter_sign_added,
          \ g:gitgutter_sign_modified,
          \ g:gitgutter_sign_removed
          \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    return join(ret, ' ')
  endfunction
  " 読込み専用マーク
  function! LightLineReadonly()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &readonly ? s:powerfont.readonly : ''
  endfunction
  " 編集マーク
  function! LightLineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction
'''

[[plugins]] # \r で即時実行
repo = 'thinca/vim-quickrun'

[[plugins]] # 行末の空白の可視化＆ :FixWhitespace で削除
repo = 'bronson/vim-trailing-whitespace'

[[plugins]] # C-pでファイル選択が捗る http://bit.ly/NuXA5u
repo = 'kien/ctrlp.vim'
hook_add = '''
  let g:ctrlp_use_migemo = 1
'''

[[plugins]] # 行番号の左側にdiffの+-とかが表示されるようにする、[c と ]c で前後のHunkに移動できる。
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_sign_modified = 'M'
  let g:gitgutter_max_signs = 5000
  " カレント行のhunkについて diff/add/reset を行うマップを追加
  nmap <Leader>hs <Plug>GitGutterStageHunk
  nmap <Leader>ha <Plug>GitGutterStageHunk
  nmap <Leader>hr <Plug>GitGutterRevertHunk
  nmap <Leader>hp <Plug>GitGutterPreviewHunk
  nmap <Leader>hd <Plug>GitGutterPreviewHunk
'''

[[plugins]] # GstatusとかGblameとかvim内でgit操作が出来る。あとgitcommitモードのmodifiedとかの行でEnterするとファイルに飛べたりする
repo = 'tpope/vim-fugitive'

[[plugins]]
# 簡単コメント、Ctr+/ でカーソル行or選択範囲をコメントトグル
repo = 'tyru/caw.vim'
hook_add = '''
  " C-/ でコメントアウト、ビジュアルモードでは選択範囲が解除されないよう直後にgvを足す
  nmap <C-_> <Plug>(caw:i:toggle)
  vmap <C-_> <Plug>(caw:i:toggle)gv
'''

[[plugins]]
# :Capture syn とかすると出力をバッファに入れることが出来る
repo = 'tyru/capture.vim'

[[plugins]]
# gx でカーソル位置のURLや単語をブラウザで開くorググる
repo = 'tyru/open-browser.vim'
hook_add = '''
  " gs でカーソル下のURLをブラウザで開く
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
# :Tabularize /, とかでアライン整形（使い方メモ http://teotr.github.io/blog/2011/04/15/tabular/
repo = 'godlygeek/tabular'


# languages
## rust
[[plugins]]
# completion (C-x C-o) and navigation (:gd goto definition)
repo = 'racer-rust/vim-racer'
on_ft = ['rust']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']

[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = ['rust']

[[plugins]]
repo = 'kawaz/rustsrcpath.vim'
on_ft = ['rust']
depends = ['vim-racer']

## toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']


##  markdown

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = ['markdown']

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown']
depends = ['tabular', 'vim-markdown-quote-syntax']
hook_add = '''
  let g:vim_markdown_new_list_item_indent = 2
'''

[[plugins]]
# 外部コマンドに依存しないMarkdownプレビュー、open-browser.vimとリアルタイムプレビューできて素敵
repo = 'kannokanno/previm'
hook_add = '''
  " TODO: :PrevimOpen でブラウザを開けるんだがquick-runで開きたい
'''




## bash

[[plugins]]
repo = 'vim-scripts/bats.vim'
on_ft = ['sh']



## go

[[plugins]]
# golang completion
repo = 'zchee/deoplete-go'
on_ft = ['go']
build = 'make'
hook_add = '''
  let g:deoplete#sources#go#align_class = 1
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  " MEMO: gocode set autobuild してfalseだったら
  " gocode set autobuild true するとvendorディレクトリ内も保管できるようになる
  " またはgo buildしてあるパッケージは補完出来るのでそれがよければautobuildは不用
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_post_source = '''
  " MEMO: gocode set autobuild true を実行しておくとvendor内のライブラリ補完もできるようになる
  let g:go_fmt_command = 'goimports'
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
  let g:go_term_enabled = 1
  if dein#tap('syntastic')
    let g:syntastic_go_checkers = ['golint', 'gotype', 'govet', 'go']
  endif
  " TODO: キーマップはまだ確認してないので後でやる
  " 関連ツールの雑なチェック
  if executable('go')
    for s:command in ['goimports', 'godef', 'golint', 'gocode', 'gotags', 'gorename']
      if !executable(s:command)
        echo s:command . ' is not found. Please run :GoInstallBinaries or :GoUpdateBinaries'
        break
      endif
    endfor
  endif
'''



## test
[[plugins]]
# テストコードへジャンプ
repo = 'janko-m/vim-test'
hook_add = '''
  let g:test#strategy = 'neovim'
  " mappings
  nmap <silent> <leader>f :TestNearest<CR>
  nmap <silent> <leader>i :TestFile<CR>
  nmap <silent> <leader>a :TestSuite<CR>
  nmap <silent> <leader>l :TestLast<CR>
  nmap <silent> <leader>g :TestVisit<CR>
  " 言語ごとのオプション
  let test#python#pytest#options = {'nearest': '-v', 'file': '-v', 'suite': '-v'}
  let test#go#gotest#options     = {'nearest': '-v', 'file': '-v', 'suite': '-v'}
'''

[[plugins]] # tagsの凄い奴
repo = 'majutsushi/tagbar'
hook_add = '''
  nmap <F8> :TagbarToggle<CR>
  " auto-ctags
  let g:auto_ctags = 1
  let g:auto_ctags_directory_list = ['.git', '.svn']
  let g:auto_ctags_tags_name = 'tags'
  let g:auto_ctags_tags_args = '--tag-relative --recurse --sort=yes'
  let g:auto_ctags_filetype_mode = 1
'''

[[plugins]] # g> g< gs で引数の位置交換を簡単に行う
repo = 'machakann/vim-swap'

[[plugins]] # 単語上で K でftに対応したdevdocs検索が出来るようにする http://bit.ly/1sbXZnf
repo = 'rhysd/devdocs.vim'
hook_add = '''
  autocmd FileType c,cpp,rust,haskell,python,go,javascript,ruby,php nmap <buffer>K <Plug>(devdocs-under-cursor)
'''

[[plugins]]
# 自動でctagsを実行する
repo = 'soramugi/auto-ctags.vim'

[[plugins]]
repo = 'kawaz/batscheck.vim'
on_ft = ['sh']

[[plugins]]
repo = 'kawaz/shellcheck.vim'
on_ft = ['sh']

[[plugins]]
repo = 'mtscout6/syntastic-local-eslint.vim'
hook_add = "let g:syntastic_javascript_checkers = ['eslint']"

## syntastic vs neomake

[[plugins]]
# ファイル保存時にエラー行があればハイライトする
repo = 'scrooloose/syntastic'
hook_add = '''
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
  let g:syntastic_error_symbol='✗'
  let g:syntastic_warning_symbol='⚠'
  let g:syntastic_style_error_symbol = '✗'
  let g:syntastic_style_warning_symbol = '⚠'
  " debug系
  let g:syntastic_debug = 0
  let g:syntastic_debug_file = expand('$TMPDIR/syntastic.log')
  function! s:SyntasticDebugToggle()
    let g:syntastic_debug = !g:syntastic_debug
    echo (g:syntastic_debug ? '🔔  Enabled' : '🔕a Disabled').': ' . g:syntastic_debug_file
  endfunction
  command! SyntasticDebugToggle :call s:SyntasticDebugToggle()
  " shellcheckの引数メモ
  " -x      : 変数未定義のチェックなどでsource先ファイルも考慮するようにする
  " -s basa : shebang が無い場合のデフォルトをbashモードにする
  let g:syntastic_sh_shellcheck_args = '-x -s bash'
'''

[[plugins]]
# asynchronous linter, instead of 'scrooloose/syntastic'
repo = 'benekastah/neomake'
hook_add = '''
  let g:neomake_open_list = 1
  " autocmd VimEnter,BufWritePost * Neomake
'''

[[plugins]]
repo = 'tyru/vim-altercmd'
hook_add = '''
  " 使うには初期化処理が必要
  call altercmd#load()
  " helpを横分割で右側に開く
  CAlterCommand h[elp] vertical belowright help
'''
